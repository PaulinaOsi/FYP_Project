version: "3"
services:
  # AWS IOT COre is the context broker
  awsiotcore:
    image: amazon/aws-iot-greengrass:${VERSION}
    hostname: aws
    container_name: myAWSIotCore
    depends_on:
      - node-js-webApp
    networks:
      - default
    expose:
      - "${AWS_PORT}"
    ports:
            - "${AWS_PORT}:${AWS_PORT}" # 8883:8883
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://aws:${AWS_PORT}/version || exit 1

  # IoT-Agent is configured for the UltraLight Protocol
  # 
  #


  node-js-webApp:
    image: home-automation-image:${VERSION}
    hostname: node
    container_name: home-automation-container
    depends_on:
      - mongo-db
      - awsiotcore
    networks:
      - default
    expose:
      - "${PORT}"
    ports:
      - "8000:8000" 
    environment:
      - HOST= awsiotcore # name of the broker to connect to
      - PORT=${PORT} # port the context broker listens on to update context
      - REGISTRY_TYPE=mongodb #hold IoT device info in memory or in a database
      - LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - TIMESTAMP=true # Supply timestamp information
      - NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - MONGO_HOST=mongo-db # The host name of MongoDB
      - IMONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - MONGO_DB=accounts # The name of the database used in mongoDB
      - MQTT_HOST=aws # The host name of the MQTT Broker
      - MQTT_PORT=8883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_DEFAULT_RESOURCE=null # Default is blank.if using MQTT don't need a resource so set to null
    healthcheck:
      test: curl --fail -s http://aws:${PORT}/aws/about || exit 1

  # container responsible for iot agent responsible for binding esp32 to iot core and mongo db
  esp32-connect:
    image: espressif/esp32-ci-env
    hostname: esp32
    container_name:esp32-ci-env-container
    depends_on:
      - awsiotcore
      - mongo-db
      - node-js-webApp
      - iot-agent
    networks:
      default:
        aliases:
          - iot-sensors
          - context-provider
    expose:
      - "${PORT}"
      - "${DEVICE_PORT}"
    ports:
      - "${PORT}:${PORT}" 
      - "${DEVICE_PORT}:${DEVICE_PORT}" 
    environment:
      - "HTTP_PORT=${PORT}"
      - "DEVICES_PORT=${DEVICE_PORT}" # Port used by  IOT device to receive commands
      - "DEVICES_TRANSPORT=MQTT" # Default transport used byIoT devices
      - "DEVICES_API_KEY= YOUR _ API _ KEY _ AWS"
    
     
    

  # Database
  mongo-db:
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - default
    command: --bind_ip_all --smallfiles
    volumes:
      - mongo-db:/data
      - ./mongo-db/mongo-db.conf:/mongo/config/ mongo-db.conf
networks:
  default:
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  mongo-db: ~
